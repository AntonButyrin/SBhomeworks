#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Есть зашифрованное сообщение

secret_message = [
    'квевтфпп6щ3стмзалтнмаршгб5длгуча',
    'дьсеы6лц2бане4т64ь4б3ущея6втщл6б',
    'т3пплвце1н3и2кд4лы12чф1ап3бкычаь',
    'ьд5фму3ежородт9г686буиимыкучшсал',
    'бсц59мегщ2лятьаьгенедыв9фк9ехб1а',
]

# Нужно его расшифровать и вывести на консоль в удобочитаемом виде.
# Должна получиться фраза на русском языке, например: как два байта переслать.

# Ключ к расшифровке:
#   первое слово - 4-я буква
#   второе слово - буквы с 10 по 13, включительно
#   третье слово - буквы с 6 по 15, включительно, через одну
#   четвертое слово - буквы с 8 по 13, включительно, в обратном порядке
#   пятое слово - буквы с 17 по 21, включительно, в обратном порядке
#
# Обратите вниманме:
#   даны номера букв, а не индексы
#   срез не включает последний индекс
#   подробную информацию об обратных срезах см https://clck.ru/MfEMS
#
# Подсказки:
#   В каждом элементе списка защифровано одно слово.
#   Требуется задать конкретные индексы, например secret_message[3][12:23:4]
#   4е и 5е слова нужно получить за 1 срез
#   Если нужны вычисления и разные пробы - делайте это в консоли пайтона, тут нужен только результат

first_word = secret_message[0][3]
second_world = secret_message[1][9:13]
third_word = secret_message[2][5:15:2]
four_word = secret_message[3][12:6:-1]
five_word = secret_message[4][20:15:-1]

# NOTE: Лучше не лепить так к объявлению переменных вызов функции print
# Плюс Печатая принтом не обязательно всё формировать в одну строку. Принт принимает множество аргументов.
# Как пример:
print("This", "is", "a", "set", "of", 7, "arguments")

# NOTE Также как в принте есть полезные аргументы навроде sep= и end=.
# Первый определяет что будет печататься между переданными аргументами,
# последний - что будет печататься в конце.
# Как пример:
print("This", "is", "a", "set", "of", 7, "arguments", sep=" # ", end="!!!\n")

# NOTE: Собственно результат вывода на консоль: This # is # a # set # of # 7 # arguments!!!
# Поскольку мы разделяем с помощью подстроки " # " и завершаем всё подстрокой с тремя восклицательными знаками.
# Символ \n использованный в завершающей подстроке является так называемым escape-character'ом.
# Т.е. символом со специальным функционалом. Собственно \n переводит курсор на следующую строку, как это делает нажатие клавиши escape.
# Также есть например символ \t, который добавляет отступы (табуляции) в строку.
# Пример:
print("This", "is", "a", "set", "of", 7, "arguments", sep="\t", end="\n")

# NOTE: Собственно в нашем случае переменная будет выглядить вот так:
print(first_word, second_world, third_word, four_word, five_word)

# NOTE: Ну и тут я забыл отметить это, посему не буду считать это за вашу ошибку. Это я недоглядел.
# Зачёт!
